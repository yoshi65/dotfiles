# status

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]] # status line
repo = 'itchyny/lightline.vim'
hook_add = '''
        let g:lightline = { 
        \ 'active': {
        \  'left':  [ [ 'mode', 'paste'],
        \             [ 'readonly', 'filename', 'modified', 'gitbranch' ] ],
        \  'right': [ [ 'percent' ],
        \             [ 'lineinfo' ],
        \             [ 'fileencoding', 'fileformat', 'filetype' ] ]
        \ },
        \ 'component_function': {
        \   'gitbranch': 'FugitiveHead'
        \ },
        \ 'colorscheme': 'wombat',
        \ 'separator': { 'left': "", 'right': "" },
        \ 'subseparator': { 'left': "", 'right': "" }
        \}
'''

# lang
[[plugins]] # Terraform
repo = 'hashivim/vim-terraform'
on_ft = ['tf', 'terraform', 'hcl']
hook_add = '''
        let g:terraform_fmt_on_save = 1
'''

# git
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
	let updatetime = 250
        nmap <C-g>g :GitGutterToggle<CR>
        nmap <C-g>h :GitGutterLineHighlightsToggle<CR>
'''

[[plugins]]
repo = 'tpope/vim-fugitive'


# template
[[plugins]]
repo = 'thinca/vim-template'
hook_add = '''
        let g:template_basedir = '~/.config'
        let g:template_free_pattern = 'template'
        " テンプレート中に含まれる文字を置き換える
        au MyAutoCmd User plugin-template-loaded call s:template_keywords()
        function! s:template_keywords()
            silent! %s/<+DATE+>/\=strftime('%Y-%m-%d %T %z')/g
            silent! %s/<+FILENAME+>/\=expand('%:r')/g
        endfunction
        " テンプレート中に含まれる'<+CURSOR+>'にカーソルを移動
        au MyAutoCmd User plugin-template-loaded
            \   if search('<+CURSOR+>')
            \ |   silent! execute 'normal! "_da>'
            \ | endif
'''

# colorscheme

[[plugins]] # badwolf
repo = 'sjl/badwolf'

# colorscheme指定
hook_add = '''
	set background=dark
	" colorscheme 設定は source 後に行う必要があるので確実に読まれている VimEnter のタイミングで行う。
	" 但し Colorscheme イベントの発生が抑制されないよう nested を付ける。
        au MyAutoCmd VimEnter * nested colorscheme badwolf
'''

# 補完

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_source = '''
        " debug
        let g:lsp_log_verbose = 1
        let g:lsp_log_file = expand('~/.cache/dein/vim-lsp.log')

        let g:lsp_signs_error = '⨉'
        let g:lsp_signs_warning = '⚠'
        if executable('pyls')
            au User lsp_setup call lsp#register_server({
                \ 'name': 'pyls',
                \ 'cmd': {server_info->['pyls']},
                \ 'whitelist': ['python'],
                \ })
        endif

        if executable('clangd')
            au User lsp_setup call lsp#register_server({
                \ 'name': 'clangd',
                \ 'cmd': {server_info->['clangd', '-background-index']},
                \ 'whitelist': ['c', 'cpp'],
                \ })
        endif

        function! s:configure_lsp() abort
          setlocal omnifunc=lsp#complete   " オムニ補完を有効化
        endfunction
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
hook_source = '''
  call ddc#custom#patch_global('completionMenu', 'pum.vim')
  call ddc#custom#patch_global('sources', [
        \ 'vim-lsp',
        \ 'file'
        \ ])
  call ddc#custom#patch_global('sourceOptions', {
        \ 'vim-lsp': {
        \   'mark': 'lsp', 
        \   'forceCompletionPattern': '\.\w*|:\w*|->\w*'
        \ },
        \ 'file': {
        \   'mark': 'file',
        \   'isVolatile': v:true, 
        \   'forceCompletionPattern': '\S/\S*'
        \ }})
  call ddc#enable()
'''

# [[plugins]]
# repo = 'Shougo/ddc-nvim-lsp.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'

[[plugins]]
repo = 'Shougo/pum.vim'
hook_add = '''
inoremap <silent><expr> <TAB>
      \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
      \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
      \ '<TAB>' : ddc#manual_complete()
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
hook_source = '''
  call popup_preview#enable()
'''

# [[plugins]]
# repo = 'neovim/nvim-lspconfig'

# nvim-treesitter
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
  },
  indent = {
    enable = true
  },
  rainbow = {
    enable = true,
    extended_mode = true,
    max_file_lines = nil,
  }
}
EOF
'''

[[plugins]]
repo = 'romgrk/nvim-treesitter-context'

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
  " Show hidden files
  let g:fern#default_hidden=1
'''

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'
depends =  ['fern.vim']

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'
depends =  ['fern.vim']
hook_add = '''
  let g:fern#renderer = 'nerdfont'
'''

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
depends =  ['fern.vim', 'nerdfont.vim']

[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'
depends =  ['fern.vim', 'fern-renderer-nerdfont.vim']
hook_add = '''
  augroup my-glyph-palette
    autocmd! *
    autocmd FileType fern call glyph_palette#apply()
    autocmd FileType nerdtree,startify call glyph_palette#apply()
  augroup END
'''
