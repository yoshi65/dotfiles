# status

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]] # status line
repo = 'itchyny/lightline.vim'
hook_add = '''
        let g:lightline = { 
        \ 'active': {
        \  'left':  [ [ 'mode', 'paste'],
        \             [ 'readonly', 'filename', 'modified', 'fugitive' ] ],
        \  'right': [ [ 'lineinfo' ],
        \             [ 'percent' ],
        \             [ 'fileencoding', 'fileformat', 'filetype' ] ]
        \ },
        \ 'component_expand': { 'fugitive': 'LightlineFugitive' },
        \ 'colorscheme': 'wombat',
        \ 'separator': { 'left': "", 'right': "" },
        \ 'subseparator': { 'left': "", 'right': "" }
        \}

        function! LightlineFugitive()
            if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
                return " " . fugitive#head()
            else
                return ''
            endif
        endfunction
        
        " function! s:Gitdiff()
        "     let dresult = system('git diff')
        "     if dresult == ''
        "     else
        "         let g:lightline.component_type = { 'fugitive': 'error' }
        "     endif
        "     call lightline#update()
        " endfunction

        " augroup AutoGdiff
        "     au!
        "     au MyAutoCmd BufRead,BufWritePost * call s:Gitdiff()
        " augroup END

'''


# Lang

[[plugins]] # Haml
repo  = 'tpope/vim-haml'
on_ft = 'haml'

[[plugins]] # Html5
repo  = 'othree/html5.vim'
on_ft = 'html'

[[plugins]] # Toml
repo  = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # Markdown
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown','mkd']
hook_add = '''
        let g:vim_markdown_frontmatter = 1
        let g:vim_markdown_math = 1
'''

[[plugins]] # Japanese doc
repo = 'vim-jp/vimdoc-ja'
on_ft = 'help'
hook_add = '''
        set helplang=ja,en
'''


# git
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
	let updatetime = 250
        nmap <C-g>g :GitGutterToggle<CR>
        nmap <C-g>h :GitGutterLineHighlightsToggle<CR>
'''

[[plugins]]
repo = 'tpope/vim-fugitive'


# template
[[plugins]]
repo = 'thinca/vim-template'
hook_add = '''
        let g:template_basedir = '~/.config'
        let g:template_free_pattern = 'template'
        " テンプレート中に含まれる文字を置き換える
        au MyAutoCmd User plugin-template-loaded call s:template_keywords()
        function! s:template_keywords()
            silent! %s/<+DATE+>/\=strftime('%Y-%m-%d %T %z')/g
            silent! %s/<+FILENAME+>/\=expand('%:r')/g
        endfunction
        " テンプレート中に含まれる'<+CURSOR+>'にカーソルを移動
        au MyAutoCmd User plugin-template-loaded
            \   if search('<+CURSOR+>')
            \ |   silent! execute 'normal! "_da>'
            \ | endif
'''


# colorscheme

# [[plugins]] # hybrid
# repo = 'w0ng/vim-hybrid'

# [[plugins]] # solarized
# repo = 'altercation/vim-colors-solarized'

[[plugins]] # badwolf
repo = 'sjl/badwolf'

# [[plugins]] # cobalt
# repo = 'gkjgh/cobalt'

# colorscheme指定
hook_add = '''
	set background=dark
	" colorscheme 設定は source 後に行う必要があるので確実に読まれている VimEnter のタイミングで行う。
	" 但し Colorscheme イベントの発生が抑制されないよう nested を付ける。
        au MyAutoCmd VimEnter * nested colorscheme badwolf
'''
