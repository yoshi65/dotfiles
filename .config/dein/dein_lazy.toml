# coding

[[plugins]] # Codic
repo = 'koron/codic-vim'
on_cmd = 'Codic'

[[plugins]] # Emmet
repo = 'mattn/emmet-vim'
on_i = 1
hook_source = '''
	let g:user_emmet_mode = 'i'
	let g:user_emmet_leader_key='<C-E>'
	let g:use_emmet_complete_tag = 1
	let g:user_emmet_settings = {
  	\   'variables': {
        \       'lang': "ja"
        \   },
  	\   'indentation': '    '
        \}
'''

[[plugins]] # EditorConfig
repo = 'editorconfig/editorconfig-vim'
on_path = '.*'

[[plugins]] # markdown viewer
repo = 'iamcco/markdown-preview.vim'
on_ft = ['markdown', 'mkd']


# 補完

[[plugins]] 
repo = 'Shougo/deoplete.nvim'
if = 'has("python3")'
depends = 'context_filetype.vim'
on_event = 'IntertCharPre'
hook_add = '''
	let g:deoplete#enable_at_startup = 1
	let g:deoplete#auto_complete_delay = 0
	let g:deoplete#auto_complete_start_length = 1
	let g:deoplete#enable_camel_case = 0
	let g:deoplete#enable_ignore_case = 0
	let g:deoplete#enable_refresh_always = 0
	let g:deoplete#enable_smart_case = 1
	let g:deoplete#file#enable_buffer_path = 1
	let g:deoplete#max_list = 10000
	" deopleteで開くtabを補完が終われば、閉じる
	au InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
'''
on_i = 1

[[plugins]] #括弧
repo  = 'cohama/lexima.vim'
on_i = 1

[[plugins]] #python
repo = 'zchee/deoplete-jedi'
on_ft = 'python'
on_event = 'IntertCharPre'

[[plugins]] #ruby
repo = 'Shougo/deoplete-rct'
on_ft = 'ruby'
on_event = 'IntertCharPre'

[[plugins]] #tex
repo = 'lervag/vimtex'
on_ft = 'tex'
hook_add = '''
        let g:latex_latexmk_options = '-pvc'
        let g:vimtex_compiler_progname = 'nvr'
'''

# fzf
[[plugins]]
repo = 'junegunn/fzf.vim'

[[plugins]]
repo = 'w0rp/ale'
on_i = 1
hook_add = '''
        " エラー行に表示するマーク
        let g:ale_sign_error = '⨉'
        let g:ale_sign_warning = '⚠'
        " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
        let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
        " エラー表示の列を常時表示
        let g:ale_sign_column_always = 1
        " ファイルを開いたときにlint実行
        let g:ale_lint_on_enter = 1
        " ファイルを保存したときにlint実行
        let g:ale_lint_on_save = 1
        " 編集中のlintはしない
        let g:ale_lint_on_text_changed = 'never'
        let g:ale_linters = {
            \ 'python': ['flake8'],
            \ }
        let g:ale_fixers = {
              \ 'python': ['autopep8', 'black', 'isort'],
              \ }
        " 各ツールの実行オプションを変更してPythonパスを固定
        let g:ale_python_flake8_executable = g:python3_host_prog
        let g:ale_python_flake8_options = '-m flake8'
        let g:ale_python_autopep8_executable = g:python3_host_prog
        let g:ale_python_autopep8_options = '-m autopep8'
        let g:ale_python_isort_executable = g:python3_host_prog
        let g:ale_python_isort_options = '-m isort'
        let g:ale_python_black_executable = g:python3_host_prog
        let g:ale_python_black_options = '-m black'
        " 保存のたびに自動整形
        " let g:ale_fix_on_save = 1
'''

[[plugins]] # unite.vim 後継
repo = 'Shougo/denite.nvim'
if = 'has("python3")'
on_cmd = 'Denite'
hook_post_source = '''
	" prompt # -> >
	call denite#custom#option('default', 'prompt', '>')
	" file_rec
	if executable('pt')
		call denite#custom#var('file_rec', 'command', ['pt', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])
	endif

	" grep
	if executable('pt')
		call denite#custom#var('grep', 'command', ['pt', '--nogroup', '--nocolor', '--smart-case', '--hidden'])
		call denite#custom#var('grep', 'default_opts', [])
		call denite#custom#var('grep', 'recursive_opts', [])
	endif

	call denite#custom#source('file_mru', 'matchers', ['matcher_fuzzy', 'matcher_project_files'])
	call denite#custom#source('file_mru', 'converters', ['converter_relative_word'])
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
depends = 'denite.nvim'
on_path = '.*'

[[plugins]]
repo = 'Shougo/neoyank.vim'
depends = 'denite.nvim'
on_event = 'TextYankPost'
